#' @title fars_read
#' This function accepts the location of the CSV file and reads it
#' If such a file does not exit then it will produce an error with the file
#' does not exit error.
#'
#' @param a csv file that may or not exit in the given location.
#'
#' @return convert the data imported from a csv file to a tbl_df format
#' If the file does not exit the stop message will be printed as an error massage
#'
#' @importFrom readr read_csv
#' @importFrom dplyr tbl_df
#'
#' @export
#'
#' @examples
#' \dontrun{dataset <- fars_read('accident_2015.csv')}
#'
#' @export
#'
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' @title make_filename
#' This function accepts a the year as a string value and returns file name
#' concatenating it as accident_year.csv.bz2
#'
#' @param the year as a string value
#'
#' @return returns the concatenated name with the year in the format
#' accident_year.csv.bz2
#'
#' @export
#'
#' @examples
#' \dontrun{filename <- make_filename('2015')}
#'
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' @title fars_read_years
#' Uses both make_filename(year) and fars_read(file)
#' Accepts one or more years as a list and produce the file name in the format of
#' accident_year.csv.bz2 and produce the relevent dataset
#'
#' @param one or more years as a list
#'
#' @return returns one or more datasets according to the number of years passed
#' returns null if the input year is invalid
#'
#' @importFrom dplyr mutate
#' @importFrom dplyr select
#'
#' @export
#'
#' @examples
#' \dontrun{fars_read_years(2015)}
#' \dontrun{fars_read_years(1999:2015)}
#'
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#' @title fars_summarize_years
#' Accepts one or more years as a list and count the numver if observations
#' grouping them by minth and year
#' Uses fars_read_years(years)
#'
#' @param one or more years as a list
#'
#' @return a dataframe of counts by months and years
#'
#' @importFrom dplyr bind_rows
#' @importFrom dplyr group_by
#' @importFrom dplyr summarize
#' @importFrom dplyr spread
#'
#' @export
#'
#' @examples
#' \dontrun{data_summary <- fars_summarize_years(2015)}
#'
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' @title fars_map_state
#' Accepts a state number and year from the user/calling program
#' Makes the appropriate filename using the year and the make_filename function
#' gets a data frame from fars_read()
#'
#' Error checks to make sure the state number exists
#' If so, uses maps and graphics to create plots based on latitude and longitude from the data file
#' Uses make_filename(year) and fars_read(filename)
#'
#' @param state.num Number of a state
#' @param year The year in question
#'
#' @return A plot or set of plots based on latitude and longitude from the data file
#'
#' @export
#'
#' @importFrom dplyr filter
#' @importFrom maps map
#' @importFrom graphics points
#'
#' @examples
#' \dontrun{
#' fars_map_state(1, 2013)
#' }
#'
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
install.packages("roxygen2")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
rm(list = c("fars_map_state", "fars_read", "fars_read_years", "fars_summarize_years", "make_filename"))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
system.file("extdata", package = "FARS")
list.files(system.file("extdata", package = "FARS"))
list.files(system.file("extdata", package = "FARS"))
list.files(system.file("extdata", package = "Fars"))
library(Far)
list.files(system.file("extdata", package = "Fars"))
system.file("extdata", package = "Far")
system.file("extdata", package = "Far")
list.files(system.file("extdata", package = "Far"))
library(testthat)
test_check("FARS")
test_check("Far")
library(Far)
test_check("Far")
testthat::context("file naming and import")
test_that("FARS csv files are available", {
expect_equal(list.files(system.file("extdata", package = "Far")),
c("accident_2013.csv.bz2",
"accident_2014.csv.bz2",
"accident_2015.csv.bz2"))
}
)
test_that("make_filename function", {
expect_that(make_filename(2013), equals("accident_2013.csv.bz2"))
})
test_that("fars_read function", {
expect_that(fars_read("accident_2013.csv.bz2"), is_a("data.frame"))
expect_that(fars_read("accident_2012.csv.bz2"), throws_error("file 'accident_2012.csv.bz2' does not exist"))
})
test_that("fars_read function", {expect_that(fars_read("accident_2013.csv.bz2"), is_a("data.frame"))})
test_that("fars_read function", {expect_that(fars_read("accident_2013.csv.bz2"), is_a("data.frame"))})
test_that("FARS csv files are available", {
expect_equal(list.files(system.file("extdata", package = "Far")),
c("accident_2013.csv.bz2",
"accident_2014.csv.bz2",
"accident_2015.csv.bz2"))
}
)
test_that("fars_read function", {expect_that(fars_read("accident_2013.csv.bz2"), is_a("data.frame"))})
install.packages("rmarkdown")
library(devtools)
use_vignette("model_details")
library(Far)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Far)
